// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: transport/internet/splithttp/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../typeRegistry";
import { StreamConfig } from "../config";

export const protobufPackage = "xray.transport.internet.splithttp";

export interface Config {
  $type: "xray.transport.internet.splithttp.Config";
  host: string;
  path: string;
  header: { [key: string]: string };
  scMaxConcurrentPosts: RandRangeConfig | undefined;
  scMaxEachPostBytes: RandRangeConfig | undefined;
  scMinPostsIntervalMs: RandRangeConfig | undefined;
  noSSEHeader: boolean;
  xPaddingBytes: RandRangeConfig | undefined;
  xmux: Multiplexing | undefined;
  downloadSettings: StreamConfig | undefined;
  mode: string;
}

export interface Config_HeaderEntry {
  $type: "xray.transport.internet.splithttp.Config.HeaderEntry";
  key: string;
  value: string;
}

export interface RandRangeConfig {
  $type: "xray.transport.internet.splithttp.RandRangeConfig";
  from: number;
  to: number;
}

export interface Multiplexing {
  $type: "xray.transport.internet.splithttp.Multiplexing";
  maxConcurrency: RandRangeConfig | undefined;
  maxConnections: RandRangeConfig | undefined;
  cMaxReuseTimes: RandRangeConfig | undefined;
  cMaxLifetimeMs: RandRangeConfig | undefined;
}

function createBaseConfig(): Config {
  return {
    $type: "xray.transport.internet.splithttp.Config",
    host: "",
    path: "",
    header: {},
    scMaxConcurrentPosts: undefined,
    scMaxEachPostBytes: undefined,
    scMinPostsIntervalMs: undefined,
    noSSEHeader: false,
    xPaddingBytes: undefined,
    xmux: undefined,
    downloadSettings: undefined,
    mode: "",
  };
}

export const Config: MessageFns<Config, "xray.transport.internet.splithttp.Config"> = {
  $type: "xray.transport.internet.splithttp.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.host !== "") {
      writer.uint32(10).string(message.host);
    }
    if (message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    Object.entries(message.header).forEach(([key, value]) => {
      Config_HeaderEntry.encode({
        $type: "xray.transport.internet.splithttp.Config.HeaderEntry",
        key: key as any,
        value,
      }, writer.uint32(26).fork()).join();
    });
    if (message.scMaxConcurrentPosts !== undefined) {
      RandRangeConfig.encode(message.scMaxConcurrentPosts, writer.uint32(34).fork()).join();
    }
    if (message.scMaxEachPostBytes !== undefined) {
      RandRangeConfig.encode(message.scMaxEachPostBytes, writer.uint32(42).fork()).join();
    }
    if (message.scMinPostsIntervalMs !== undefined) {
      RandRangeConfig.encode(message.scMinPostsIntervalMs, writer.uint32(50).fork()).join();
    }
    if (message.noSSEHeader !== false) {
      writer.uint32(56).bool(message.noSSEHeader);
    }
    if (message.xPaddingBytes !== undefined) {
      RandRangeConfig.encode(message.xPaddingBytes, writer.uint32(66).fork()).join();
    }
    if (message.xmux !== undefined) {
      Multiplexing.encode(message.xmux, writer.uint32(74).fork()).join();
    }
    if (message.downloadSettings !== undefined) {
      StreamConfig.encode(message.downloadSettings, writer.uint32(82).fork()).join();
    }
    if (message.mode !== "") {
      writer.uint32(90).string(message.mode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.host = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = Config_HeaderEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.header[entry3.key] = entry3.value;
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.scMaxConcurrentPosts = RandRangeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.scMaxEachPostBytes = RandRangeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.scMinPostsIntervalMs = RandRangeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.noSSEHeader = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.xPaddingBytes = RandRangeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.xmux = Multiplexing.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.downloadSettings = StreamConfig.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.mode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      header: isObject(object.header)
        ? Object.entries(object.header).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      scMaxConcurrentPosts: isSet(object.scMaxConcurrentPosts)
        ? RandRangeConfig.fromJSON(object.scMaxConcurrentPosts)
        : undefined,
      scMaxEachPostBytes: isSet(object.scMaxEachPostBytes)
        ? RandRangeConfig.fromJSON(object.scMaxEachPostBytes)
        : undefined,
      scMinPostsIntervalMs: isSet(object.scMinPostsIntervalMs)
        ? RandRangeConfig.fromJSON(object.scMinPostsIntervalMs)
        : undefined,
      noSSEHeader: isSet(object.noSSEHeader) ? globalThis.Boolean(object.noSSEHeader) : false,
      xPaddingBytes: isSet(object.xPaddingBytes) ? RandRangeConfig.fromJSON(object.xPaddingBytes) : undefined,
      xmux: isSet(object.xmux) ? Multiplexing.fromJSON(object.xmux) : undefined,
      downloadSettings: isSet(object.downloadSettings) ? StreamConfig.fromJSON(object.downloadSettings) : undefined,
      mode: isSet(object.mode) ? globalThis.String(object.mode) : "",
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.header) {
      const entries = Object.entries(message.header);
      if (entries.length > 0) {
        obj.header = {};
        entries.forEach(([k, v]) => {
          obj.header[k] = v;
        });
      }
    }
    if (message.scMaxConcurrentPosts !== undefined) {
      obj.scMaxConcurrentPosts = RandRangeConfig.toJSON(message.scMaxConcurrentPosts);
    }
    if (message.scMaxEachPostBytes !== undefined) {
      obj.scMaxEachPostBytes = RandRangeConfig.toJSON(message.scMaxEachPostBytes);
    }
    if (message.scMinPostsIntervalMs !== undefined) {
      obj.scMinPostsIntervalMs = RandRangeConfig.toJSON(message.scMinPostsIntervalMs);
    }
    if (message.noSSEHeader !== false) {
      obj.noSSEHeader = message.noSSEHeader;
    }
    if (message.xPaddingBytes !== undefined) {
      obj.xPaddingBytes = RandRangeConfig.toJSON(message.xPaddingBytes);
    }
    if (message.xmux !== undefined) {
      obj.xmux = Multiplexing.toJSON(message.xmux);
    }
    if (message.downloadSettings !== undefined) {
      obj.downloadSettings = StreamConfig.toJSON(message.downloadSettings);
    }
    if (message.mode !== "") {
      obj.mode = message.mode;
    }
    return obj;
  },

  create(base?: DeepPartial<Config>): Config {
    return Config.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Config>): Config {
    const message = createBaseConfig();
    message.host = object.host ?? "";
    message.path = object.path ?? "";
    message.header = Object.entries(object.header ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.scMaxConcurrentPosts = (object.scMaxConcurrentPosts !== undefined && object.scMaxConcurrentPosts !== null)
      ? RandRangeConfig.fromPartial(object.scMaxConcurrentPosts)
      : undefined;
    message.scMaxEachPostBytes = (object.scMaxEachPostBytes !== undefined && object.scMaxEachPostBytes !== null)
      ? RandRangeConfig.fromPartial(object.scMaxEachPostBytes)
      : undefined;
    message.scMinPostsIntervalMs = (object.scMinPostsIntervalMs !== undefined && object.scMinPostsIntervalMs !== null)
      ? RandRangeConfig.fromPartial(object.scMinPostsIntervalMs)
      : undefined;
    message.noSSEHeader = object.noSSEHeader ?? false;
    message.xPaddingBytes = (object.xPaddingBytes !== undefined && object.xPaddingBytes !== null)
      ? RandRangeConfig.fromPartial(object.xPaddingBytes)
      : undefined;
    message.xmux = (object.xmux !== undefined && object.xmux !== null)
      ? Multiplexing.fromPartial(object.xmux)
      : undefined;
    message.downloadSettings = (object.downloadSettings !== undefined && object.downloadSettings !== null)
      ? StreamConfig.fromPartial(object.downloadSettings)
      : undefined;
    message.mode = object.mode ?? "";
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

function createBaseConfig_HeaderEntry(): Config_HeaderEntry {
  return { $type: "xray.transport.internet.splithttp.Config.HeaderEntry", key: "", value: "" };
}

export const Config_HeaderEntry: MessageFns<
  Config_HeaderEntry,
  "xray.transport.internet.splithttp.Config.HeaderEntry"
> = {
  $type: "xray.transport.internet.splithttp.Config.HeaderEntry" as const,

  encode(message: Config_HeaderEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config_HeaderEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig_HeaderEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config_HeaderEntry {
    return {
      $type: Config_HeaderEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Config_HeaderEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Config_HeaderEntry>): Config_HeaderEntry {
    return Config_HeaderEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Config_HeaderEntry>): Config_HeaderEntry {
    const message = createBaseConfig_HeaderEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(Config_HeaderEntry.$type, Config_HeaderEntry);

function createBaseRandRangeConfig(): RandRangeConfig {
  return { $type: "xray.transport.internet.splithttp.RandRangeConfig", from: 0, to: 0 };
}

export const RandRangeConfig: MessageFns<RandRangeConfig, "xray.transport.internet.splithttp.RandRangeConfig"> = {
  $type: "xray.transport.internet.splithttp.RandRangeConfig" as const,

  encode(message: RandRangeConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.from !== 0) {
      writer.uint32(8).int32(message.from);
    }
    if (message.to !== 0) {
      writer.uint32(16).int32(message.to);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RandRangeConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRandRangeConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.from = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.to = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RandRangeConfig {
    return {
      $type: RandRangeConfig.$type,
      from: isSet(object.from) ? globalThis.Number(object.from) : 0,
      to: isSet(object.to) ? globalThis.Number(object.to) : 0,
    };
  },

  toJSON(message: RandRangeConfig): unknown {
    const obj: any = {};
    if (message.from !== 0) {
      obj.from = Math.round(message.from);
    }
    if (message.to !== 0) {
      obj.to = Math.round(message.to);
    }
    return obj;
  },

  create(base?: DeepPartial<RandRangeConfig>): RandRangeConfig {
    return RandRangeConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RandRangeConfig>): RandRangeConfig {
    const message = createBaseRandRangeConfig();
    message.from = object.from ?? 0;
    message.to = object.to ?? 0;
    return message;
  },
};

messageTypeRegistry.set(RandRangeConfig.$type, RandRangeConfig);

function createBaseMultiplexing(): Multiplexing {
  return {
    $type: "xray.transport.internet.splithttp.Multiplexing",
    maxConcurrency: undefined,
    maxConnections: undefined,
    cMaxReuseTimes: undefined,
    cMaxLifetimeMs: undefined,
  };
}

export const Multiplexing: MessageFns<Multiplexing, "xray.transport.internet.splithttp.Multiplexing"> = {
  $type: "xray.transport.internet.splithttp.Multiplexing" as const,

  encode(message: Multiplexing, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxConcurrency !== undefined) {
      RandRangeConfig.encode(message.maxConcurrency, writer.uint32(10).fork()).join();
    }
    if (message.maxConnections !== undefined) {
      RandRangeConfig.encode(message.maxConnections, writer.uint32(18).fork()).join();
    }
    if (message.cMaxReuseTimes !== undefined) {
      RandRangeConfig.encode(message.cMaxReuseTimes, writer.uint32(26).fork()).join();
    }
    if (message.cMaxLifetimeMs !== undefined) {
      RandRangeConfig.encode(message.cMaxLifetimeMs, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Multiplexing {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiplexing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.maxConcurrency = RandRangeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.maxConnections = RandRangeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cMaxReuseTimes = RandRangeConfig.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.cMaxLifetimeMs = RandRangeConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Multiplexing {
    return {
      $type: Multiplexing.$type,
      maxConcurrency: isSet(object.maxConcurrency) ? RandRangeConfig.fromJSON(object.maxConcurrency) : undefined,
      maxConnections: isSet(object.maxConnections) ? RandRangeConfig.fromJSON(object.maxConnections) : undefined,
      cMaxReuseTimes: isSet(object.cMaxReuseTimes) ? RandRangeConfig.fromJSON(object.cMaxReuseTimes) : undefined,
      cMaxLifetimeMs: isSet(object.cMaxLifetimeMs) ? RandRangeConfig.fromJSON(object.cMaxLifetimeMs) : undefined,
    };
  },

  toJSON(message: Multiplexing): unknown {
    const obj: any = {};
    if (message.maxConcurrency !== undefined) {
      obj.maxConcurrency = RandRangeConfig.toJSON(message.maxConcurrency);
    }
    if (message.maxConnections !== undefined) {
      obj.maxConnections = RandRangeConfig.toJSON(message.maxConnections);
    }
    if (message.cMaxReuseTimes !== undefined) {
      obj.cMaxReuseTimes = RandRangeConfig.toJSON(message.cMaxReuseTimes);
    }
    if (message.cMaxLifetimeMs !== undefined) {
      obj.cMaxLifetimeMs = RandRangeConfig.toJSON(message.cMaxLifetimeMs);
    }
    return obj;
  },

  create(base?: DeepPartial<Multiplexing>): Multiplexing {
    return Multiplexing.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Multiplexing>): Multiplexing {
    const message = createBaseMultiplexing();
    message.maxConcurrency = (object.maxConcurrency !== undefined && object.maxConcurrency !== null)
      ? RandRangeConfig.fromPartial(object.maxConcurrency)
      : undefined;
    message.maxConnections = (object.maxConnections !== undefined && object.maxConnections !== null)
      ? RandRangeConfig.fromPartial(object.maxConnections)
      : undefined;
    message.cMaxReuseTimes = (object.cMaxReuseTimes !== undefined && object.cMaxReuseTimes !== null)
      ? RandRangeConfig.fromPartial(object.cMaxReuseTimes)
      : undefined;
    message.cMaxLifetimeMs = (object.cMaxLifetimeMs !== undefined && object.cMaxLifetimeMs !== null)
      ? RandRangeConfig.fromPartial(object.cMaxLifetimeMs)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Multiplexing.$type, Multiplexing);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
