// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: transport/internet/websocket/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "xray.transport.internet.websocket";

export interface Config {
  $type: "xray.transport.internet.websocket.Config";
  host: string;
  /** URL path to the WebSocket service. Empty value means root(/). */
  path: string;
  header: { [key: string]: string };
  acceptProxyProtocol: boolean;
  ed: number;
}

export interface Config_HeaderEntry {
  $type: "xray.transport.internet.websocket.Config.HeaderEntry";
  key: string;
  value: string;
}

function createBaseConfig(): Config {
  return {
    $type: "xray.transport.internet.websocket.Config",
    host: "",
    path: "",
    header: {},
    acceptProxyProtocol: false,
    ed: 0,
  };
}

export const Config: MessageFns<Config, "xray.transport.internet.websocket.Config"> = {
  $type: "xray.transport.internet.websocket.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.host !== "") {
      writer.uint32(10).string(message.host);
    }
    if (message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    Object.entries(message.header).forEach(([key, value]) => {
      Config_HeaderEntry.encode({
        $type: "xray.transport.internet.websocket.Config.HeaderEntry",
        key: key as any,
        value,
      }, writer.uint32(26).fork()).join();
    });
    if (message.acceptProxyProtocol !== false) {
      writer.uint32(32).bool(message.acceptProxyProtocol);
    }
    if (message.ed !== 0) {
      writer.uint32(40).uint32(message.ed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.host = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = Config_HeaderEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.header[entry3.key] = entry3.value;
          }
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.acceptProxyProtocol = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.ed = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      host: isSet(object.host) ? globalThis.String(object.host) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      header: isObject(object.header)
        ? Object.entries(object.header).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      acceptProxyProtocol: isSet(object.acceptProxyProtocol) ? globalThis.Boolean(object.acceptProxyProtocol) : false,
      ed: isSet(object.ed) ? globalThis.Number(object.ed) : 0,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.host !== "") {
      obj.host = message.host;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.header) {
      const entries = Object.entries(message.header);
      if (entries.length > 0) {
        obj.header = {};
        entries.forEach(([k, v]) => {
          obj.header[k] = v;
        });
      }
    }
    if (message.acceptProxyProtocol !== false) {
      obj.acceptProxyProtocol = message.acceptProxyProtocol;
    }
    if (message.ed !== 0) {
      obj.ed = Math.round(message.ed);
    }
    return obj;
  },

  create(base?: DeepPartial<Config>): Config {
    return Config.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Config>): Config {
    const message = createBaseConfig();
    message.host = object.host ?? "";
    message.path = object.path ?? "";
    message.header = Object.entries(object.header ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.acceptProxyProtocol = object.acceptProxyProtocol ?? false;
    message.ed = object.ed ?? 0;
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

function createBaseConfig_HeaderEntry(): Config_HeaderEntry {
  return { $type: "xray.transport.internet.websocket.Config.HeaderEntry", key: "", value: "" };
}

export const Config_HeaderEntry: MessageFns<
  Config_HeaderEntry,
  "xray.transport.internet.websocket.Config.HeaderEntry"
> = {
  $type: "xray.transport.internet.websocket.Config.HeaderEntry" as const,

  encode(message: Config_HeaderEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config_HeaderEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig_HeaderEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config_HeaderEntry {
    return {
      $type: Config_HeaderEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Config_HeaderEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Config_HeaderEntry>): Config_HeaderEntry {
    return Config_HeaderEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Config_HeaderEntry>): Config_HeaderEntry {
    const message = createBaseConfig_HeaderEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(Config_HeaderEntry.$type, Config_HeaderEntry);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
