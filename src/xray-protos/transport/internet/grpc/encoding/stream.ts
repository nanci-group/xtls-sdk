// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.29.3
// source: transport/internet/grpc/encoding/stream.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "xray.transport.internet.grpc.encoding";

export interface Hunk {
  $type: "xray.transport.internet.grpc.encoding.Hunk";
  data: Uint8Array;
}

export interface MultiHunk {
  $type: "xray.transport.internet.grpc.encoding.MultiHunk";
  data: Uint8Array[];
}

function createBaseHunk(): Hunk {
  return { $type: "xray.transport.internet.grpc.encoding.Hunk", data: new Uint8Array(0) };
}

export const Hunk: MessageFns<Hunk, "xray.transport.internet.grpc.encoding.Hunk"> = {
  $type: "xray.transport.internet.grpc.encoding.Hunk" as const,

  encode(message: Hunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Hunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Hunk {
    return { $type: Hunk.$type, data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0) };
  },

  toJSON(message: Hunk): unknown {
    const obj: any = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<Hunk>): Hunk {
    return Hunk.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Hunk>): Hunk {
    const message = createBaseHunk();
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

messageTypeRegistry.set(Hunk.$type, Hunk);

function createBaseMultiHunk(): MultiHunk {
  return { $type: "xray.transport.internet.grpc.encoding.MultiHunk", data: [] };
}

export const MultiHunk: MessageFns<MultiHunk, "xray.transport.internet.grpc.encoding.MultiHunk"> = {
  $type: "xray.transport.internet.grpc.encoding.MultiHunk" as const,

  encode(message: MultiHunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      writer.uint32(10).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MultiHunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMultiHunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MultiHunk {
    return {
      $type: MultiHunk.$type,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => bytesFromBase64(e)) : [],
    };
  },

  toJSON(message: MultiHunk): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MultiHunk>): MultiHunk {
    return MultiHunk.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MultiHunk>): MultiHunk {
    const message = createBaseMultiHunk();
    message.data = object.data?.map((e) => e) || [];
    return message;
  },
};

messageTypeRegistry.set(MultiHunk.$type, MultiHunk);

export type GRPCServiceDefinition = typeof GRPCServiceDefinition;
export const GRPCServiceDefinition = {
  name: "GRPCService",
  fullName: "xray.transport.internet.grpc.encoding.GRPCService",
  methods: {
    tun: { name: "Tun", requestType: Hunk, requestStream: true, responseType: Hunk, responseStream: true, options: {} },
    tunMulti: {
      name: "TunMulti",
      requestType: MultiHunk,
      requestStream: true,
      responseType: MultiHunk,
      responseStream: true,
      options: {},
    },
  },
} as const;

export interface GRPCServiceImplementation<CallContextExt = {}> {
  tun(
    request: AsyncIterable<Hunk>,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<Hunk>>;
  tunMulti(
    request: AsyncIterable<MultiHunk>,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<MultiHunk>>;
}

export interface GRPCServiceClient<CallOptionsExt = {}> {
  tun(request: AsyncIterable<DeepPartial<Hunk>>, options?: CallOptions & CallOptionsExt): AsyncIterable<Hunk>;
  tunMulti(
    request: AsyncIterable<DeepPartial<MultiHunk>>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<MultiHunk>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
