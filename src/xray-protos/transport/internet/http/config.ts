// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: transport/internet/http/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../typeRegistry";
import { Header } from "../headers/http/config";

export const protobufPackage = "xray.transport.internet.http";

export interface Config {
  $type: "xray.transport.internet.http.Config";
  host: string[];
  path: string;
  idleTimeout: number;
  healthCheckTimeout: number;
  method: string;
  header: Header[];
}

function createBaseConfig(): Config {
  return {
    $type: "xray.transport.internet.http.Config",
    host: [],
    path: "",
    idleTimeout: 0,
    healthCheckTimeout: 0,
    method: "",
    header: [],
  };
}

export const Config: MessageFns<Config, "xray.transport.internet.http.Config"> = {
  $type: "xray.transport.internet.http.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.host) {
      writer.uint32(10).string(v!);
    }
    if (message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.idleTimeout !== 0) {
      writer.uint32(24).int32(message.idleTimeout);
    }
    if (message.healthCheckTimeout !== 0) {
      writer.uint32(32).int32(message.healthCheckTimeout);
    }
    if (message.method !== "") {
      writer.uint32(42).string(message.method);
    }
    for (const v of message.header) {
      Header.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.host.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.idleTimeout = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.healthCheckTimeout = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.method = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.header.push(Header.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      host: globalThis.Array.isArray(object?.host) ? object.host.map((e: any) => globalThis.String(e)) : [],
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      idleTimeout: isSet(object.idleTimeout) ? globalThis.Number(object.idleTimeout) : 0,
      healthCheckTimeout: isSet(object.healthCheckTimeout) ? globalThis.Number(object.healthCheckTimeout) : 0,
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      header: globalThis.Array.isArray(object?.header) ? object.header.map((e: any) => Header.fromJSON(e)) : [],
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.host?.length) {
      obj.host = message.host;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.idleTimeout !== 0) {
      obj.idleTimeout = Math.round(message.idleTimeout);
    }
    if (message.healthCheckTimeout !== 0) {
      obj.healthCheckTimeout = Math.round(message.healthCheckTimeout);
    }
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.header?.length) {
      obj.header = message.header.map((e) => Header.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Config>): Config {
    return Config.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Config>): Config {
    const message = createBaseConfig();
    message.host = object.host?.map((e) => e) || [];
    message.path = object.path ?? "";
    message.idleTimeout = object.idleTimeout ?? 0;
    message.healthCheckTimeout = object.healthCheckTimeout ?? 0;
    message.method = object.method ?? "";
    message.header = object.header?.map((e) => Header.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
