// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.29.3
// source: proxy/vless/account.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../typeRegistry";

export const protobufPackage = "xray.proxy.vless";

export interface Reverse {
  $type: "xray.proxy.vless.Reverse";
  tag: string;
}

export interface Account {
  $type: "xray.proxy.vless.Account";
  /** ID of the account, in the form of a UUID, e.g., "66ad4540-b58c-4ad2-9926-ea63445a9b57". */
  id: string;
  /** Flow settings. May be "xtls-rprx-vision". */
  flow: string;
  encryption: string;
  xorMode: number;
  seconds: number;
  padding: string;
  reverse: Reverse | undefined;
}

function createBaseReverse(): Reverse {
  return { $type: "xray.proxy.vless.Reverse", tag: "" };
}

export const Reverse: MessageFns<Reverse, "xray.proxy.vless.Reverse"> = {
  $type: "xray.proxy.vless.Reverse" as const,

  encode(message: Reverse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tag !== "") {
      writer.uint32(10).string(message.tag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reverse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReverse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tag = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reverse {
    return { $type: Reverse.$type, tag: isSet(object.tag) ? globalThis.String(object.tag) : "" };
  },

  toJSON(message: Reverse): unknown {
    const obj: any = {};
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    return obj;
  },

  create(base?: DeepPartial<Reverse>): Reverse {
    return Reverse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Reverse>): Reverse {
    const message = createBaseReverse();
    message.tag = object.tag ?? "";
    return message;
  },
};

messageTypeRegistry.set(Reverse.$type, Reverse);

function createBaseAccount(): Account {
  return {
    $type: "xray.proxy.vless.Account",
    id: "",
    flow: "",
    encryption: "",
    xorMode: 0,
    seconds: 0,
    padding: "",
    reverse: undefined,
  };
}

export const Account: MessageFns<Account, "xray.proxy.vless.Account"> = {
  $type: "xray.proxy.vless.Account" as const,

  encode(message: Account, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.flow !== "") {
      writer.uint32(18).string(message.flow);
    }
    if (message.encryption !== "") {
      writer.uint32(26).string(message.encryption);
    }
    if (message.xorMode !== 0) {
      writer.uint32(32).uint32(message.xorMode);
    }
    if (message.seconds !== 0) {
      writer.uint32(40).uint32(message.seconds);
    }
    if (message.padding !== "") {
      writer.uint32(50).string(message.padding);
    }
    if (message.reverse !== undefined) {
      Reverse.encode(message.reverse, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Account {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.flow = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.encryption = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.xorMode = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.seconds = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.padding = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.reverse = Reverse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Account {
    return {
      $type: Account.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      flow: isSet(object.flow) ? globalThis.String(object.flow) : "",
      encryption: isSet(object.encryption) ? globalThis.String(object.encryption) : "",
      xorMode: isSet(object.xorMode) ? globalThis.Number(object.xorMode) : 0,
      seconds: isSet(object.seconds) ? globalThis.Number(object.seconds) : 0,
      padding: isSet(object.padding) ? globalThis.String(object.padding) : "",
      reverse: isSet(object.reverse) ? Reverse.fromJSON(object.reverse) : undefined,
    };
  },

  toJSON(message: Account): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.flow !== "") {
      obj.flow = message.flow;
    }
    if (message.encryption !== "") {
      obj.encryption = message.encryption;
    }
    if (message.xorMode !== 0) {
      obj.xorMode = Math.round(message.xorMode);
    }
    if (message.seconds !== 0) {
      obj.seconds = Math.round(message.seconds);
    }
    if (message.padding !== "") {
      obj.padding = message.padding;
    }
    if (message.reverse !== undefined) {
      obj.reverse = Reverse.toJSON(message.reverse);
    }
    return obj;
  },

  create(base?: DeepPartial<Account>): Account {
    return Account.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Account>): Account {
    const message = createBaseAccount();
    message.id = object.id ?? "";
    message.flow = object.flow ?? "";
    message.encryption = object.encryption ?? "";
    message.xorMode = object.xorMode ?? 0;
    message.seconds = object.seconds ?? 0;
    message.padding = object.padding ?? "";
    message.reverse = (object.reverse !== undefined && object.reverse !== null)
      ? Reverse.fromPartial(object.reverse)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Account.$type, Account);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
