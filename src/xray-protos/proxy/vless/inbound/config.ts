// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: proxy/vless/inbound/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { User } from "../../../common/protocol/user";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "xray.proxy.vless.inbound";

export interface Fallback {
  $type: "xray.proxy.vless.inbound.Fallback";
  name: string;
  alpn: string;
  path: string;
  type: string;
  dest: string;
  xver: number;
}

export interface Config {
  $type: "xray.proxy.vless.inbound.Config";
  clients: User[];
  /**
   * Decryption settings. Only applies to server side, and only accepts "none"
   * for now.
   */
  decryption: string;
  fallbacks: Fallback[];
}

function createBaseFallback(): Fallback {
  return { $type: "xray.proxy.vless.inbound.Fallback", name: "", alpn: "", path: "", type: "", dest: "", xver: 0 };
}

export const Fallback: MessageFns<Fallback, "xray.proxy.vless.inbound.Fallback"> = {
  $type: "xray.proxy.vless.inbound.Fallback" as const,

  encode(message: Fallback, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.alpn !== "") {
      writer.uint32(18).string(message.alpn);
    }
    if (message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    if (message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    if (message.dest !== "") {
      writer.uint32(42).string(message.dest);
    }
    if (message.xver !== 0) {
      writer.uint32(48).uint64(message.xver);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Fallback {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.alpn = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.dest = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.xver = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Fallback {
    return {
      $type: Fallback.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      alpn: isSet(object.alpn) ? globalThis.String(object.alpn) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      dest: isSet(object.dest) ? globalThis.String(object.dest) : "",
      xver: isSet(object.xver) ? globalThis.Number(object.xver) : 0,
    };
  },

  toJSON(message: Fallback): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.alpn !== "") {
      obj.alpn = message.alpn;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.dest !== "") {
      obj.dest = message.dest;
    }
    if (message.xver !== 0) {
      obj.xver = Math.round(message.xver);
    }
    return obj;
  },

  create(base?: DeepPartial<Fallback>): Fallback {
    return Fallback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Fallback>): Fallback {
    const message = createBaseFallback();
    message.name = object.name ?? "";
    message.alpn = object.alpn ?? "";
    message.path = object.path ?? "";
    message.type = object.type ?? "";
    message.dest = object.dest ?? "";
    message.xver = object.xver ?? 0;
    return message;
  },
};

messageTypeRegistry.set(Fallback.$type, Fallback);

function createBaseConfig(): Config {
  return { $type: "xray.proxy.vless.inbound.Config", clients: [], decryption: "", fallbacks: [] };
}

export const Config: MessageFns<Config, "xray.proxy.vless.inbound.Config"> = {
  $type: "xray.proxy.vless.inbound.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.clients) {
      User.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.decryption !== "") {
      writer.uint32(18).string(message.decryption);
    }
    for (const v of message.fallbacks) {
      Fallback.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clients.push(User.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.decryption = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fallbacks.push(Fallback.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      clients: globalThis.Array.isArray(object?.clients) ? object.clients.map((e: any) => User.fromJSON(e)) : [],
      decryption: isSet(object.decryption) ? globalThis.String(object.decryption) : "",
      fallbacks: globalThis.Array.isArray(object?.fallbacks)
        ? object.fallbacks.map((e: any) => Fallback.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.clients?.length) {
      obj.clients = message.clients.map((e) => User.toJSON(e));
    }
    if (message.decryption !== "") {
      obj.decryption = message.decryption;
    }
    if (message.fallbacks?.length) {
      obj.fallbacks = message.fallbacks.map((e) => Fallback.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Config>): Config {
    return Config.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Config>): Config {
    const message = createBaseConfig();
    message.clients = object.clients?.map((e) => User.fromPartial(e)) || [];
    message.decryption = object.decryption ?? "";
    message.fallbacks = object.fallbacks?.map((e) => Fallback.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
