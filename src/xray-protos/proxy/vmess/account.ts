// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.29.3
// source: proxy/vmess/account.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { SecurityConfig } from "../../common/protocol/headers";
import { messageTypeRegistry } from "../../typeRegistry";

export const protobufPackage = "xray.proxy.vmess";

export interface Account {
  $type: "xray.proxy.vmess.Account";
  /**
   * ID of the account, in the form of a UUID, e.g.,
   * "66ad4540-b58c-4ad2-9926-ea63445a9b57".
   */
  id: string;
  /** Security settings. Only applies to client side. */
  securitySettings:
    | SecurityConfig
    | undefined;
  /** Define tests enabled for this account */
  testsEnabled: string;
}

function createBaseAccount(): Account {
  return { $type: "xray.proxy.vmess.Account", id: "", securitySettings: undefined, testsEnabled: "" };
}

export const Account: MessageFns<Account, "xray.proxy.vmess.Account"> = {
  $type: "xray.proxy.vmess.Account" as const,

  encode(message: Account, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.securitySettings !== undefined) {
      SecurityConfig.encode(message.securitySettings, writer.uint32(26).fork()).join();
    }
    if (message.testsEnabled !== "") {
      writer.uint32(34).string(message.testsEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Account {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.securitySettings = SecurityConfig.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.testsEnabled = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Account {
    return {
      $type: Account.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      securitySettings: isSet(object.securitySettings) ? SecurityConfig.fromJSON(object.securitySettings) : undefined,
      testsEnabled: isSet(object.testsEnabled) ? globalThis.String(object.testsEnabled) : "",
    };
  },

  toJSON(message: Account): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.securitySettings !== undefined) {
      obj.securitySettings = SecurityConfig.toJSON(message.securitySettings);
    }
    if (message.testsEnabled !== "") {
      obj.testsEnabled = message.testsEnabled;
    }
    return obj;
  },

  create(base?: DeepPartial<Account>): Account {
    return Account.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Account>): Account {
    const message = createBaseAccount();
    message.id = object.id ?? "";
    message.securitySettings = (object.securitySettings !== undefined && object.securitySettings !== null)
      ? SecurityConfig.fromPartial(object.securitySettings)
      : undefined;
    message.testsEnabled = object.testsEnabled ?? "";
    return message;
  },
};

messageTypeRegistry.set(Account.$type, Account);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
