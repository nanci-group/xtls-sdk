// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.29.3
// source: common/net/port.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../typeRegistry";

export const protobufPackage = "xray.common.net";

/** PortRange represents a range of ports. */
export interface PortRange {
  $type: "xray.common.net.PortRange";
  /** The port that this range starts from. */
  From: number;
  /** The port that this range ends with (inclusive). */
  To: number;
}

/** PortList is a list of ports. */
export interface PortList {
  $type: "xray.common.net.PortList";
  range: PortRange[];
}

function createBasePortRange(): PortRange {
  return { $type: "xray.common.net.PortRange", From: 0, To: 0 };
}

export const PortRange: MessageFns<PortRange, "xray.common.net.PortRange"> = {
  $type: "xray.common.net.PortRange" as const,

  encode(message: PortRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.From !== 0) {
      writer.uint32(8).uint32(message.From);
    }
    if (message.To !== 0) {
      writer.uint32(16).uint32(message.To);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PortRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePortRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.From = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.To = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PortRange {
    return {
      $type: PortRange.$type,
      From: isSet(object.From) ? globalThis.Number(object.From) : 0,
      To: isSet(object.To) ? globalThis.Number(object.To) : 0,
    };
  },

  toJSON(message: PortRange): unknown {
    const obj: any = {};
    if (message.From !== 0) {
      obj.From = Math.round(message.From);
    }
    if (message.To !== 0) {
      obj.To = Math.round(message.To);
    }
    return obj;
  },

  create(base?: DeepPartial<PortRange>): PortRange {
    return PortRange.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PortRange>): PortRange {
    const message = createBasePortRange();
    message.From = object.From ?? 0;
    message.To = object.To ?? 0;
    return message;
  },
};

messageTypeRegistry.set(PortRange.$type, PortRange);

function createBasePortList(): PortList {
  return { $type: "xray.common.net.PortList", range: [] };
}

export const PortList: MessageFns<PortList, "xray.common.net.PortList"> = {
  $type: "xray.common.net.PortList" as const,

  encode(message: PortList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.range) {
      PortRange.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PortList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePortList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.range.push(PortRange.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PortList {
    return {
      $type: PortList.$type,
      range: globalThis.Array.isArray(object?.range) ? object.range.map((e: any) => PortRange.fromJSON(e)) : [],
    };
  },

  toJSON(message: PortList): unknown {
    const obj: any = {};
    if (message.range?.length) {
      obj.range = message.range.map((e) => PortRange.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PortList>): PortList {
    return PortList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PortList>): PortList {
    const message = createBasePortList();
    message.range = object.range?.map((e) => PortRange.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(PortList.$type, PortList);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
