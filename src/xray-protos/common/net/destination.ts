// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: common/net/destination.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../typeRegistry";
import { IPOrDomain } from "./address";
import { Network, networkFromJSON, networkToJSON } from "./network";

export const protobufPackage = "xray.common.net";

/** Endpoint of a network connection. */
export interface Endpoint {
  $type: "xray.common.net.Endpoint";
  network: Network;
  address: IPOrDomain | undefined;
  port: number;
}

function createBaseEndpoint(): Endpoint {
  return { $type: "xray.common.net.Endpoint", network: 0, address: undefined, port: 0 };
}

export const Endpoint: MessageFns<Endpoint, "xray.common.net.Endpoint"> = {
  $type: "xray.common.net.Endpoint" as const,

  encode(message: Endpoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.network !== 0) {
      writer.uint32(8).int32(message.network);
    }
    if (message.address !== undefined) {
      IPOrDomain.encode(message.address, writer.uint32(18).fork()).join();
    }
    if (message.port !== 0) {
      writer.uint32(24).uint32(message.port);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Endpoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEndpoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.network = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = IPOrDomain.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.port = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Endpoint {
    return {
      $type: Endpoint.$type,
      network: isSet(object.network) ? networkFromJSON(object.network) : 0,
      address: isSet(object.address) ? IPOrDomain.fromJSON(object.address) : undefined,
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
    };
  },

  toJSON(message: Endpoint): unknown {
    const obj: any = {};
    if (message.network !== 0) {
      obj.network = networkToJSON(message.network);
    }
    if (message.address !== undefined) {
      obj.address = IPOrDomain.toJSON(message.address);
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port);
    }
    return obj;
  },

  create(base?: DeepPartial<Endpoint>): Endpoint {
    return Endpoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Endpoint>): Endpoint {
    const message = createBaseEndpoint();
    message.network = object.network ?? 0;
    message.address = (object.address !== undefined && object.address !== null)
      ? IPOrDomain.fromPartial(object.address)
      : undefined;
    message.port = object.port ?? 0;
    return message;
  },
};

messageTypeRegistry.set(Endpoint.$type, Endpoint);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
