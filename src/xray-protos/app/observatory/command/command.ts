// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: app/observatory/command/command.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { messageTypeRegistry } from "../../../typeRegistry";
import { ObservationResult } from "../config";

export const protobufPackage = "xray.core.app.observatory.command";

export interface GetOutboundStatusRequest {
  $type: "xray.core.app.observatory.command.GetOutboundStatusRequest";
}

export interface GetOutboundStatusResponse {
  $type: "xray.core.app.observatory.command.GetOutboundStatusResponse";
  status: ObservationResult | undefined;
}

export interface Config {
  $type: "xray.core.app.observatory.command.Config";
}

function createBaseGetOutboundStatusRequest(): GetOutboundStatusRequest {
  return { $type: "xray.core.app.observatory.command.GetOutboundStatusRequest" };
}

export const GetOutboundStatusRequest: MessageFns<
  GetOutboundStatusRequest,
  "xray.core.app.observatory.command.GetOutboundStatusRequest"
> = {
  $type: "xray.core.app.observatory.command.GetOutboundStatusRequest" as const,

  encode(_: GetOutboundStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOutboundStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOutboundStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetOutboundStatusRequest {
    return { $type: GetOutboundStatusRequest.$type };
  },

  toJSON(_: GetOutboundStatusRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetOutboundStatusRequest>): GetOutboundStatusRequest {
    return GetOutboundStatusRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetOutboundStatusRequest>): GetOutboundStatusRequest {
    const message = createBaseGetOutboundStatusRequest();
    return message;
  },
};

messageTypeRegistry.set(GetOutboundStatusRequest.$type, GetOutboundStatusRequest);

function createBaseGetOutboundStatusResponse(): GetOutboundStatusResponse {
  return { $type: "xray.core.app.observatory.command.GetOutboundStatusResponse", status: undefined };
}

export const GetOutboundStatusResponse: MessageFns<
  GetOutboundStatusResponse,
  "xray.core.app.observatory.command.GetOutboundStatusResponse"
> = {
  $type: "xray.core.app.observatory.command.GetOutboundStatusResponse" as const,

  encode(message: GetOutboundStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ObservationResult.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOutboundStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOutboundStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ObservationResult.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOutboundStatusResponse {
    return {
      $type: GetOutboundStatusResponse.$type,
      status: isSet(object.status) ? ObservationResult.fromJSON(object.status) : undefined,
    };
  },

  toJSON(message: GetOutboundStatusResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ObservationResult.toJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<GetOutboundStatusResponse>): GetOutboundStatusResponse {
    return GetOutboundStatusResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOutboundStatusResponse>): GetOutboundStatusResponse {
    const message = createBaseGetOutboundStatusResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? ObservationResult.fromPartial(object.status)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(GetOutboundStatusResponse.$type, GetOutboundStatusResponse);

function createBaseConfig(): Config {
  return { $type: "xray.core.app.observatory.command.Config" };
}

export const Config: MessageFns<Config, "xray.core.app.observatory.command.Config"> = {
  $type: "xray.core.app.observatory.command.Config" as const,

  encode(_: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Config {
    return { $type: Config.$type };
  },

  toJSON(_: Config): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Config>): Config {
    return Config.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Config>): Config {
    const message = createBaseConfig();
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

export type ObservatoryServiceDefinition = typeof ObservatoryServiceDefinition;
export const ObservatoryServiceDefinition = {
  name: "ObservatoryService",
  fullName: "xray.core.app.observatory.command.ObservatoryService",
  methods: {
    getOutboundStatus: {
      name: "GetOutboundStatus",
      requestType: GetOutboundStatusRequest,
      requestStream: false,
      responseType: GetOutboundStatusResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface ObservatoryServiceImplementation<CallContextExt = {}> {
  getOutboundStatus(
    request: GetOutboundStatusRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetOutboundStatusResponse>>;
}

export interface ObservatoryServiceClient<CallOptionsExt = {}> {
  getOutboundStatus(
    request: DeepPartial<GetOutboundStatusRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetOutboundStatusResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
