// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.3
// source: app/log/command/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "xray.app.log.command";

export interface Config {
  $type: "xray.app.log.command.Config";
}

export interface RestartLoggerRequest {
  $type: "xray.app.log.command.RestartLoggerRequest";
}

export interface RestartLoggerResponse {
  $type: "xray.app.log.command.RestartLoggerResponse";
}

function createBaseConfig(): Config {
  return { $type: "xray.app.log.command.Config" };
}

export const Config: MessageFns<Config, "xray.app.log.command.Config"> = {
  $type: "xray.app.log.command.Config" as const,

  encode(_: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Config {
    return { $type: Config.$type };
  },

  toJSON(_: Config): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Config>): Config {
    return Config.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Config>): Config {
    const message = createBaseConfig();
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

function createBaseRestartLoggerRequest(): RestartLoggerRequest {
  return { $type: "xray.app.log.command.RestartLoggerRequest" };
}

export const RestartLoggerRequest: MessageFns<RestartLoggerRequest, "xray.app.log.command.RestartLoggerRequest"> = {
  $type: "xray.app.log.command.RestartLoggerRequest" as const,

  encode(_: RestartLoggerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestartLoggerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestartLoggerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RestartLoggerRequest {
    return { $type: RestartLoggerRequest.$type };
  },

  toJSON(_: RestartLoggerRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RestartLoggerRequest>): RestartLoggerRequest {
    return RestartLoggerRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RestartLoggerRequest>): RestartLoggerRequest {
    const message = createBaseRestartLoggerRequest();
    return message;
  },
};

messageTypeRegistry.set(RestartLoggerRequest.$type, RestartLoggerRequest);

function createBaseRestartLoggerResponse(): RestartLoggerResponse {
  return { $type: "xray.app.log.command.RestartLoggerResponse" };
}

export const RestartLoggerResponse: MessageFns<RestartLoggerResponse, "xray.app.log.command.RestartLoggerResponse"> = {
  $type: "xray.app.log.command.RestartLoggerResponse" as const,

  encode(_: RestartLoggerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestartLoggerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestartLoggerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RestartLoggerResponse {
    return { $type: RestartLoggerResponse.$type };
  },

  toJSON(_: RestartLoggerResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RestartLoggerResponse>): RestartLoggerResponse {
    return RestartLoggerResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RestartLoggerResponse>): RestartLoggerResponse {
    const message = createBaseRestartLoggerResponse();
    return message;
  },
};

messageTypeRegistry.set(RestartLoggerResponse.$type, RestartLoggerResponse);

export type LoggerServiceDefinition = typeof LoggerServiceDefinition;
export const LoggerServiceDefinition = {
  name: "LoggerService",
  fullName: "xray.app.log.command.LoggerService",
  methods: {
    restartLogger: {
      name: "RestartLogger",
      requestType: RestartLoggerRequest,
      requestStream: false,
      responseType: RestartLoggerResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface LoggerServiceImplementation<CallContextExt = {}> {
  restartLogger(
    request: RestartLoggerRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RestartLoggerResponse>>;
}

export interface LoggerServiceClient<CallOptionsExt = {}> {
  restartLogger(
    request: DeepPartial<RestartLoggerRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RestartLoggerResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
