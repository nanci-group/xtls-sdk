// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.29.3
// source: app/dns/fakedns/fakedns.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "xray.app.dns.fakedns";

export interface FakeDnsPool {
  $type: "xray.app.dns.fakedns.FakeDnsPool";
  /** CIDR of IP pool used as fake DNS IP */
  ipPool: string;
  /** Size of Pool for remembering relationship between domain name and IP address */
  lruSize: number;
}

export interface FakeDnsPoolMulti {
  $type: "xray.app.dns.fakedns.FakeDnsPoolMulti";
  pools: FakeDnsPool[];
}

function createBaseFakeDnsPool(): FakeDnsPool {
  return { $type: "xray.app.dns.fakedns.FakeDnsPool", ipPool: "", lruSize: 0 };
}

export const FakeDnsPool: MessageFns<FakeDnsPool, "xray.app.dns.fakedns.FakeDnsPool"> = {
  $type: "xray.app.dns.fakedns.FakeDnsPool" as const,

  encode(message: FakeDnsPool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ipPool !== "") {
      writer.uint32(10).string(message.ipPool);
    }
    if (message.lruSize !== 0) {
      writer.uint32(16).int64(message.lruSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FakeDnsPool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFakeDnsPool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ipPool = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.lruSize = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FakeDnsPool {
    return {
      $type: FakeDnsPool.$type,
      ipPool: isSet(object.ipPool) ? globalThis.String(object.ipPool) : "",
      lruSize: isSet(object.lruSize) ? globalThis.Number(object.lruSize) : 0,
    };
  },

  toJSON(message: FakeDnsPool): unknown {
    const obj: any = {};
    if (message.ipPool !== "") {
      obj.ipPool = message.ipPool;
    }
    if (message.lruSize !== 0) {
      obj.lruSize = Math.round(message.lruSize);
    }
    return obj;
  },

  create(base?: DeepPartial<FakeDnsPool>): FakeDnsPool {
    return FakeDnsPool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FakeDnsPool>): FakeDnsPool {
    const message = createBaseFakeDnsPool();
    message.ipPool = object.ipPool ?? "";
    message.lruSize = object.lruSize ?? 0;
    return message;
  },
};

messageTypeRegistry.set(FakeDnsPool.$type, FakeDnsPool);

function createBaseFakeDnsPoolMulti(): FakeDnsPoolMulti {
  return { $type: "xray.app.dns.fakedns.FakeDnsPoolMulti", pools: [] };
}

export const FakeDnsPoolMulti: MessageFns<FakeDnsPoolMulti, "xray.app.dns.fakedns.FakeDnsPoolMulti"> = {
  $type: "xray.app.dns.fakedns.FakeDnsPoolMulti" as const,

  encode(message: FakeDnsPoolMulti, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.pools) {
      FakeDnsPool.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FakeDnsPoolMulti {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFakeDnsPoolMulti();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pools.push(FakeDnsPool.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FakeDnsPoolMulti {
    return {
      $type: FakeDnsPoolMulti.$type,
      pools: globalThis.Array.isArray(object?.pools) ? object.pools.map((e: any) => FakeDnsPool.fromJSON(e)) : [],
    };
  },

  toJSON(message: FakeDnsPoolMulti): unknown {
    const obj: any = {};
    if (message.pools?.length) {
      obj.pools = message.pools.map((e) => FakeDnsPool.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FakeDnsPoolMulti>): FakeDnsPoolMulti {
    return FakeDnsPoolMulti.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FakeDnsPoolMulti>): FakeDnsPoolMulti {
    const message = createBaseFakeDnsPoolMulti();
    message.pools = object.pools?.map((e) => FakeDnsPool.fromPartial(e)) || [];
    return message;
  },
};

messageTypeRegistry.set(FakeDnsPoolMulti.$type, FakeDnsPoolMulti);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
