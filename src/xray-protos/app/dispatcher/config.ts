// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.29.3
// source: app/dispatcher/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../typeRegistry";

export const protobufPackage = "xray.app.dispatcher";

export interface SessionConfig {
  $type: "xray.app.dispatcher.SessionConfig";
}

export interface Config {
  $type: "xray.app.dispatcher.Config";
  settings: SessionConfig | undefined;
}

function createBaseSessionConfig(): SessionConfig {
  return { $type: "xray.app.dispatcher.SessionConfig" };
}

export const SessionConfig: MessageFns<SessionConfig, "xray.app.dispatcher.SessionConfig"> = {
  $type: "xray.app.dispatcher.SessionConfig" as const,

  encode(_: SessionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SessionConfig {
    return { $type: SessionConfig.$type };
  },

  toJSON(_: SessionConfig): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SessionConfig>): SessionConfig {
    return SessionConfig.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SessionConfig>): SessionConfig {
    const message = createBaseSessionConfig();
    return message;
  },
};

messageTypeRegistry.set(SessionConfig.$type, SessionConfig);

function createBaseConfig(): Config {
  return { $type: "xray.app.dispatcher.Config", settings: undefined };
}

export const Config: MessageFns<Config, "xray.app.dispatcher.Config"> = {
  $type: "xray.app.dispatcher.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.settings !== undefined) {
      SessionConfig.encode(message.settings, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.settings = SessionConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      settings: isSet(object.settings) ? SessionConfig.fromJSON(object.settings) : undefined,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.settings !== undefined) {
      obj.settings = SessionConfig.toJSON(message.settings);
    }
    return obj;
  },

  create(base?: DeepPartial<Config>): Config {
    return Config.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Config>): Config {
    const message = createBaseConfig();
    message.settings = (object.settings !== undefined && object.settings !== null)
      ? SessionConfig.fromPartial(object.settings)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
