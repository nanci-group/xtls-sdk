// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.29.3
// source: app/stats/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../typeRegistry";

export const protobufPackage = "xray.app.stats";

export interface Config {
  $type: "xray.app.stats.Config";
}

export interface ChannelConfig {
  $type: "xray.app.stats.ChannelConfig";
  Blocking: boolean;
  SubscriberLimit: number;
  BufferSize: number;
}

function createBaseConfig(): Config {
  return { $type: "xray.app.stats.Config" };
}

export const Config: MessageFns<Config, "xray.app.stats.Config"> = {
  $type: "xray.app.stats.Config" as const,

  encode(_: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Config {
    return { $type: Config.$type };
  },

  toJSON(_: Config): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Config>): Config {
    return Config.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Config>): Config {
    const message = createBaseConfig();
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

function createBaseChannelConfig(): ChannelConfig {
  return { $type: "xray.app.stats.ChannelConfig", Blocking: false, SubscriberLimit: 0, BufferSize: 0 };
}

export const ChannelConfig: MessageFns<ChannelConfig, "xray.app.stats.ChannelConfig"> = {
  $type: "xray.app.stats.ChannelConfig" as const,

  encode(message: ChannelConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Blocking !== false) {
      writer.uint32(8).bool(message.Blocking);
    }
    if (message.SubscriberLimit !== 0) {
      writer.uint32(16).int32(message.SubscriberLimit);
    }
    if (message.BufferSize !== 0) {
      writer.uint32(24).int32(message.BufferSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChannelConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChannelConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.Blocking = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.SubscriberLimit = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.BufferSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChannelConfig {
    return {
      $type: ChannelConfig.$type,
      Blocking: isSet(object.Blocking) ? globalThis.Boolean(object.Blocking) : false,
      SubscriberLimit: isSet(object.SubscriberLimit) ? globalThis.Number(object.SubscriberLimit) : 0,
      BufferSize: isSet(object.BufferSize) ? globalThis.Number(object.BufferSize) : 0,
    };
  },

  toJSON(message: ChannelConfig): unknown {
    const obj: any = {};
    if (message.Blocking !== false) {
      obj.Blocking = message.Blocking;
    }
    if (message.SubscriberLimit !== 0) {
      obj.SubscriberLimit = Math.round(message.SubscriberLimit);
    }
    if (message.BufferSize !== 0) {
      obj.BufferSize = Math.round(message.BufferSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ChannelConfig>): ChannelConfig {
    return ChannelConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChannelConfig>): ChannelConfig {
    const message = createBaseChannelConfig();
    message.Blocking = object.Blocking ?? false;
    message.SubscriberLimit = object.SubscriberLimit ?? 0;
    message.BufferSize = object.BufferSize ?? 0;
    return message;
  },
};

messageTypeRegistry.set(ChannelConfig.$type, ChannelConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
